<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Iahc&#39;s Blog</title>
  
  
  <link href="https://blog.iahc.top/atom.xml" rel="self"/>
  
  <link href="https://blog.iahc.top/"/>
  <updated>2021-10-19T06:33:28.848Z</updated>
  <id>https://blog.iahc.top/</id>
  
  <author>
    <name>iahc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java笔记</title>
    <link href="https://blog.iahc.top/java-note/"/>
    <id>https://blog.iahc.top/java-note/</id>
    <published>2020-12-12T03:05:07.000Z</published>
    <updated>2021-10-19T06:33:28.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="“-”和equals有什么区别？"><a href="#“-”和equals有什么区别？" class="headerlink" title="“==”和equals有什么区别？"></a>“==”和equals有什么区别？</h2><ol><li><p>“==”对于基本类型来说比较的是值是否相同，对于引用类型来说比较多是引用的地址是否相同。</p></li><li><p>equals本质上就是“==”，比较的是引用，String、Integer等类重写了equals方法使其变成了值比较。</p></li></ol><h2 id="两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？"><a href="#两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？" class="headerlink" title="两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？"></a>两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？</h2><p>错误，两个不相同的对象有可能会发生hash冲突。</p><h2 id="final-在-java-中有什么作用？"><a href="#final-在-java-中有什么作用？" class="headerlink" title="final 在 java 中有什么作用？"></a>final 在 java 中有什么作用？</h2><ul><li>final修饰的类叫最终类，该类不能被继承。</li><li>final修饰的方法不能被重写。</li><li>final修饰的变量叫常量，常量必须初始化，初始化之后值就不能再被更改了。</li></ul><h2 id="java-中的-Math-round-1-5-等于多少？"><a href="#java-中的-Math-round-1-5-等于多少？" class="headerlink" title="java 中的 Math.round(-1.5) 等于多少？"></a>java 中的 Math.round(-1.5) 等于多少？</h2><p>等于-1，该方法原理是原数+0.5再向下取整。</p><h2 id="String-属于基础的数据类型吗？"><a href="#String-属于基础的数据类型吗？" class="headerlink" title="String 属于基础的数据类型吗？"></a>String 属于基础的数据类型吗？</h2><p>不属于，String属于引用类型，基础数据类型有8种：byte,short,int,long,char,boolean,float,double。</p><h2 id="java-中操作字符串都有哪些类？它们之间有什么区别？"><a href="#java-中操作字符串都有哪些类？它们之间有什么区别？" class="headerlink" title="java 中操作字符串都有哪些类？它们之间有什么区别？"></a>java 中操作字符串都有哪些类？它们之间有什么区别？</h2><p>String,StringBuilder,StringBuffer。String声明的是不可变对象，其余两个可以在原有对象的基础上进行操作，所以经常对字符串进行操作的情况下最好不要使用String类型。</p><p>StringBuilder和Stringbuffer的区别是前者线程不安全，且性能较高，后者线程安全，但性能较弱。</p><h2 id="String-str-”i”与-String-str-new-String-“i”-一样吗？"><a href="#String-str-”i”与-String-str-new-String-“i”-一样吗？" class="headerlink" title="String str=”i”与 String str=new String(“i”)一样吗？"></a>String str=”i”与 String str=new String(“i”)一样吗？</h2><p>不一样，虚拟机会将前者分配到常量池中，而后者会被分配到堆内存中。</p><h2 id="如何将字符串反转？"><a href="#如何将字符串反转？" class="headerlink" title="如何将字符串反转？"></a>如何将字符串反转？</h2><p>使用StringBuffer或StringBuilder中的reverse()方法。</p><h2 id="String-类的常用方法都有哪些？"><a href="#String-类的常用方法都有哪些？" class="headerlink" title="String 类的常用方法都有哪些？"></a>String 类的常用方法都有哪些？</h2><ul><li>indexof</li><li>split</li><li>replace</li><li>chartAt</li><li>length</li><li>toLowerCase</li><li>toUpperCase</li><li>substring</li><li>equals</li><li>trim</li><li>getBytes</li></ul><h2 id="抽象类必须要有抽象方法吗？"><a href="#抽象类必须要有抽象方法吗？" class="headerlink" title="抽象类必须要有抽象方法吗？"></a>抽象类必须要有抽象方法吗？</h2><p>不是必须的。</p><h2 id="抽象类能使用-final-修饰吗？"><a href="#抽象类能使用-final-修饰吗？" class="headerlink" title="抽象类能使用 final 修饰吗？"></a>抽象类能使用 final 修饰吗？</h2><p>不能。抽象类本来就是要让其他类继承的，抽象类使用final修饰就代表了不能被继承，这与抽象类的设计理念产生矛盾。</p><h2 id="接口和抽象类有什么区别？"><a href="#接口和抽象类有什么区别？" class="headerlink" title="接口和抽象类有什么区别？"></a>接口和抽象类有什么区别？</h2><p>…</p><h2 id="java-中-IO-流分为几种？"><a href="#java-中-IO-流分为几种？" class="headerlink" title="java 中 IO 流分为几种？"></a>java 中 IO 流分为几种？</h2><ul><li>按功能分：输入流、输出流。</li><li>按类型分：字节流、字符流。</li></ul><h2 id="BIO、NIO、AIO-有什么区别？"><a href="#BIO、NIO、AIO-有什么区别？" class="headerlink" title="BIO、NIO、AIO 有什么区别？"></a>BIO、NIO、AIO 有什么区别？</h2><ul><li>BIO: Block IO同步阻塞式IO。</li><li>NIO：New IO同步非阻塞试IO，是BIO的升级，客户端和服务端通过Channel通讯，实现多路复用。</li><li>AIO：Asynchronous IO是NIO的升级，也叫NIO2。实现了异步非阻塞IO，异步IO的操作是基于事件和回调机制。</li></ul><h2 id="Files的常用方法都有哪些？"><a href="#Files的常用方法都有哪些？" class="headerlink" title="Files的常用方法都有哪些？"></a>Files的常用方法都有哪些？</h2><ul><li>exits</li><li>createFile</li><li>createDirectory</li><li>delete</li><li>copy</li><li>move</li><li>size</li><li>read</li><li>write</li></ul><h1 id="Java容器"><a href="#Java容器" class="headerlink" title="Java容器"></a>Java容器</h1><h2 id="java-容器都有哪些？"><a href="#java-容器都有哪些？" class="headerlink" title="java 容器都有哪些？"></a>java 容器都有哪些？</h2><ul><li><p>List</p><ol><li>ArrayList</li><li>LinkedList</li><li>Vector</li><li>CopyOnWriteArrayList</li></ol></li><li><p>Queue</p><ul><li>非阻塞队列<ol><li>LinkedList</li><li>PriorityQueue</li><li>ConcurrentLnkedQueue</li></ol></li><li>阻塞队列<ol><li>ArrayBlockingQueue</li><li>LinkedBlockingQueue</li><li>PriorityBlockingQueue</li><li>DelayQueue</li><li>SynchronousQueue</li></ol></li></ul></li><li><p>Map</p><ol><li>HashMap</li><li>LinkedHashMap</li><li>HashTable</li><li>TreeMap</li><li>ConCurrentHashMap</li></ol></li><li><p>Set</p><ol><li>HashSet</li><li>LinkedHashSet</li><li>TreeSet</li></ol></li></ul><h2 id="Collection-和-Collections-有什么区别？"><a href="#Collection-和-Collections-有什么区别？" class="headerlink" title="Collection 和 Collections 有什么区别？"></a>Collection 和 Collections 有什么区别？</h2><p>Collection是集合的顶级接口，Collections是集合的一个工具类，提供了对集合进行排序、搜索以及线程安全操作等方法。</p><h2 id="HashMap-和-Hashtable-有什么区别？"><a href="#HashMap-和-Hashtable-有什么区别？" class="headerlink" title="HashMap 和 Hashtable 有什么区别？"></a>HashMap 和 Hashtable 有什么区别？</h2><ol><li>HashTable是线程安全的，但是效率比HashMap低。</li><li>HashMap允许空键值，而HashTable不允许。</li></ol><h2 id="如何决定使用-HashMap-还是-TreeMap？"><a href="#如何决定使用-HashMap-还是-TreeMap？" class="headerlink" title="如何决定使用 HashMap 还是 TreeMap？"></a>如何决定使用 HashMap 还是 TreeMap？</h2><p>如果需要对一个有序的key集合进行排序操作，则选择TreeMap，否则选择HashMap。</p><h2 id="说一下-HashMap-的实现原理？"><a href="#说一下-HashMap-的实现原理？" class="headerlink" title="说一下 HashMap 的实现原理？"></a>说一下 HashMap 的实现原理？</h2><p>HashMap实际上是一个数组和链表的结合体。当我们往HashMap中put元素时，它首先会根据key的hashcode计算hash值，然后根据hash值得到这个元素在数组中的位置。如果该位置没有元素，则直接将该元素放到数组的该位置上。如果该位置已经有了其他元素，这种情况就叫hash冲突，HashMap会将这个位置上的元素以链表的形式存放，jdk1.8中以尾插法的方式插入元素，如果链表中的元素超过8个，该链表会转为红黑树来提高查询效率。</p><h2 id="说一下-HashSet-的实现原理？"><a href="#说一下-HashSet-的实现原理？" class="headerlink" title="说一下 HashSet 的实现原理？"></a>说一下 HashSet 的实现原理？</h2><p>HashSet的底层由HashMap实现，它的值存在HashMap的key上，HashMap的value统一为PRESENT。</p><h2 id="ArrayList-和-LinkedList-的区别是什么？"><a href="#ArrayList-和-LinkedList-的区别是什么？" class="headerlink" title="ArrayList 和 LinkedList 的区别是什么？"></a>ArrayList 和 LinkedList 的区别是什么？</h2><p>ArrayList底层数据结构是数组，支持随机访问。LinkedList底层是双向循环链表。ArrayList查找元素时，时间复杂度为O(1),LinkedList为O(n)。</p><h2 id="如何实现数组和-List-之间的转换？"><a href="#如何实现数组和-List-之间的转换？" class="headerlink" title="如何实现数组和 List 之间的转换？"></a>如何实现数组和 List 之间的转换？</h2><ul><li>List转数组：调用List的toArray方法。</li><li>数组转List：调用Arrays的asList方法。</li></ul><h2 id="ArrayList-和-Vector-的区别是什么？"><a href="#ArrayList-和-Vector-的区别是什么？" class="headerlink" title="ArrayList 和 Vector 的区别是什么？"></a>ArrayList 和 Vector 的区别是什么？</h2><p>Vector是线程安全的，ArrayList不是。一般使用ArrayList较多，而且它可以使用Collections工具类将其变为同步集合。</p><h2 id="Array-和-ArrayList-有何区别？"><a href="#Array-和-ArrayList-有何区别？" class="headerlink" title="Array 和 ArrayList 有何区别？"></a>Array 和 ArrayList 有何区别？</h2><ol><li>Array大小固定，ArrayList大小可变。</li><li>Array中能容纳基本类型和对象，而ArrayList只能容纳对象。</li><li>ArrayList提供更多方法。</li></ol><h2 id="在-Queue-中-poll-和-remove-有什么区别？"><a href="#在-Queue-中-poll-和-remove-有什么区别？" class="headerlink" title="在 Queue 中 poll()和 remove()有什么区别？"></a>在 Queue 中 poll()和 remove()有什么区别？</h2><p>两者都是从队列中取出一个元素，前者当获取元素失败时返回null，后者会抛出异常。</p><h2 id="哪些集合类是线程安全的？"><a href="#哪些集合类是线程安全的？" class="headerlink" title="哪些集合类是线程安全的？"></a>哪些集合类是线程安全的？</h2><ol><li>Vector/HashTable</li><li>CopyOnWriteArrayList/ConcurrentHashMap</li></ol><h2 id="迭代器-Iterator-是什么？"><a href="#迭代器-Iterator-是什么？" class="headerlink" title="迭代器 Iterator 是什么？"></a>迭代器 Iterator 是什么？</h2><p>迭代器是一种设计模式，他是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。</p><h2 id="Iterator-怎么使用？有什么特点？"><a href="#Iterator-怎么使用？有什么特点？" class="headerlink" title="Iterator 怎么使用？有什么特点？"></a>Iterator 怎么使用？有什么特点？</h2><p>Java中的Iterator功能比较简单，并且只能单向移动：</p><p>(1) 使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。</p><p>(2) 使用next()获得序列中的下一个元素。</p><p>(3) 使用hasNext()检查序列中是否还有元素。</p><p>(4) 使用remove()将迭代器新返回的元素删除。　</p><p>Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。</p><h2 id="Iterator-和-ListIterator-有什么区别？"><a href="#Iterator-和-ListIterator-有什么区别？" class="headerlink" title="Iterator 和 ListIterator 有什么区别？"></a>Iterator 和 ListIterator 有什么区别？</h2><ul><li><p>Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。 </p></li><li><p>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。 </p></li><li><p>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。</p></li></ul><h2 id="怎么确保一个集合不能被修改？"><a href="#怎么确保一个集合不能被修改？" class="headerlink" title="怎么确保一个集合不能被修改？"></a>怎么确保一个集合不能被修改？</h2><p>使用Collectioins类的unmodifiableCollection方法。</p><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="并行和并发有什么区别？"><a href="#并行和并发有什么区别？" class="headerlink" title="并行和并发有什么区别？"></a>并行和并发有什么区别？</h2><ul><li>并行指两个或多个事件在同一时刻发生。</li><li>并发指两个或多个事件在同一时间间隔内发生。</li></ul><h2 id="线程和进程的区别？"><a href="#线程和进程的区别？" class="headerlink" title="线程和进程的区别？"></a>线程和进程的区别？</h2><ul><li>进程：是执行中的一段程序，一旦程序被载入内存中请准备执行，他就是一个进程。</li><li>线程：单个进程中执行的任务就是一个线程，线程是进程中执行运算的最小单位。</li><li>一个程序至少有一个进程，一个进程至少有一个线程。进程在运行过程中有独立的内存单元，而多线程共享内存，极大提高了程序的执行效率。</li></ul><h2 id="守护线程是什么？"><a href="#守护线程是什么？" class="headerlink" title="守护线程是什么？"></a>守护线程是什么？</h2><p>守护线程是为了服务于主线程，当主线程消亡，它也会被销毁。</p><h2 id="创建线程有哪几种方式？"><a href="#创建线程有哪几种方式？" class="headerlink" title="创建线程有哪几种方式？"></a>创建线程有哪几种方式？</h2><ol><li>继承Thread类</li><li>实现Runable接口</li><li>实现Callable接口</li></ol><h2 id="说一下-runnable-和-callable-有什么区别？"><a href="#说一下-runnable-和-callable-有什么区别？" class="headerlink" title="说一下 runnable 和 callable 有什么区别？"></a>说一下 runnable 和 callable 有什么区别？</h2><ul><li>Runcable接口中run方法的返回值是void</li><li>Callable接口中run方法的返回值为泛型。通过与Future、FutureTask配合可以获取异步执行结果。</li></ul><h2 id="线程有哪些状态？"><a href="#线程有哪些状态？" class="headerlink" title="线程有哪些状态？"></a>线程有哪些状态？</h2><ol><li>创建状态：生成线程对象，还没有调用start方法。</li><li>就绪状态：调用线程对象的start方法后进入就绪状态。线程阻塞结束之后也会进入就绪状态。</li><li>运行状态：当线程获取到CPU时间片之后，进入运行状态。</li><li>阻塞状态：调用sleep/join方法时进入阻塞状态。</li><li>死亡状态：run方法执行结束或异常退出。</li></ol><h2 id="sleep-和-wait-有什么区别？"><a href="#sleep-和-wait-有什么区别？" class="headerlink" title="sleep() 和 wait() 有什么区别？"></a>sleep() 和 wait() 有什么区别？</h2><p>调用sleep方法会使线程进入休眠状态，休眠结束之后，会进入就绪状态。需要注意点事sleep方法不会释放锁。<br>wait方法是Object类中的方法，当调用该方法后，该线程就会进入该对象相关的等待池，同时会释放所持有的锁，可以通过notify/notifyAll方法来唤醒等待的线程。</p><h2 id="notify-和-notifyAll-有什么区别？"><a href="#notify-和-notifyAll-有什么区别？" class="headerlink" title="notify()和 notifyAll()有什么区别？"></a>notify()和 notifyAll()有什么区别？</h2><p>notify方法随机唤醒一个等待池中的线程，而notifyAll会将所有等待池中等的线程一起唤醒。</p><h2 id="线程的-run-和-start-有什么区别？"><a href="#线程的-run-和-start-有什么区别？" class="headerlink" title="线程的 run()和 start()有什么区别？"></a>线程的 run()和 start()有什么区别？</h2><p>start方法是多线程的启动方法，直接调用run方法就等于直接调用了一个普通的函数。</p><h2 id="创建线程池有哪几种方式？"><a href="#创建线程池有哪几种方式？" class="headerlink" title="创建线程池有哪几种方式？"></a>创建线程池有哪几种方式？</h2><ol><li>newFixedThreadPool<br> 这是一个长度固定的线程池。</li><li>newCachedThreadPool<br> 可缓存的线程池。</li><li>newSingleThreadExecutor<br> 单线池。</li><li>newScheduledThreadPoll<br> 长度固定的线程池，并且以延迟或者定时的方式来执行任务，类似于Timer。</li></ol><h2 id="线程池都有哪些状态？"><a href="#线程池都有哪些状态？" class="headerlink" title="线程池都有哪些状态？"></a>线程池都有哪些状态？</h2><p>…</p><h2 id="线程池中-submit-和-execute-方法有什么区别？"><a href="#线程池中-submit-和-execute-方法有什么区别？" class="headerlink" title="线程池中 submit()和 execute()方法有什么区别？"></a>线程池中 submit()和 execute()方法有什么区别？</h2><ol><li>接受参数不一样。</li><li>suubmit有返回值，execute没有。</li><li>submit方便Exception处理。</li></ol><h2 id="在-java-程序中怎么保证多线程的运行安全？"><a href="#在-java-程序中怎么保证多线程的运行安全？" class="headerlink" title="在 java 程序中怎么保证多线程的运行安全？"></a>在 java 程序中怎么保证多线程的运行安全？</h2><p>线程安全在三个方面体现：</p><ul><li><p>原子性：提供互斥访问，同一时刻只能有一个线程对数据进行操作，（atomic,synchronized）；</p></li><li><p>可见性：一个线程对主内存的修改可以及时地被其他线程看到，（synchronized,volatile）；</p></li><li><p>有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序，该观察结果一般杂乱无序，（happens-before原则）。</p></li></ul><h2 id="多线程锁的升级原理是什么？"><a href="#多线程锁的升级原理是什么？" class="headerlink" title="多线程锁的升级原理是什么？"></a>多线程锁的升级原理是什么？</h2><p>…</p><h2 id="什么是死锁？"><a href="#什么是死锁？" class="headerlink" title="什么是死锁？"></a>什么是死锁？</h2><p>指两个或两个以上的线程互相持有对方所需要的锁，导致这些线程一直处于等待状态，无法向下执行。</p><h2 id="怎么防止死锁？"><a href="#怎么防止死锁？" class="headerlink" title="怎么防止死锁？"></a>怎么防止死锁？</h2><p>死锁的四个必要条件：</p><pre><code>* 互斥条件：进程对所分配到的资源不允许其他进程进行访问，若其他进程访问该资源，只能等待，直至占有该资源的进程使用完成后释放该资源* 请求和保持条件：进程获得一定的资源之后，又对其他资源发出请求，但是该资源可能被其他进程占有，此事请求阻塞，但又对自己获得的资源保持不放* 不可剥夺条件：是指进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用完后自己释放* 环路等待条件：是指进程发生死锁后，若干进程之间形成一种头尾相接的循环等待资源关系</code></pre><p>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之 一不满足，就不会发生死锁。</p><p>理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和 解除死锁。<br>避免死锁的方式：<br>    * 加锁顺序（线程按照一定的顺序加锁）<br>    * 加锁时限（线程尝试获取锁的时候加上一定的时限，超过时限则放弃对该锁的请求，并释放自己占有的锁）<br>    * 死锁检测</p><h2 id="ThreadLocal-是什么？有哪些使用场景？"><a href="#ThreadLocal-是什么？有哪些使用场景？" class="headerlink" title="ThreadLocal 是什么？有哪些使用场景？"></a>ThreadLocal 是什么？有哪些使用场景？</h2><p>ThreadLocal是维护线程内变量的类，该变量只能在当前线程访问，相对于其他线程是隔离的。例如可将JDBC的连接对象Connection放入ThreadLocal中。</p><h2 id="说一下-synchronized-底层实现原理？"><a href="#说一下-synchronized-底层实现原理？" class="headerlink" title="说一下 synchronized 底层实现原理？"></a>说一下 synchronized 底层实现原理？</h2><ul><li>普通同步方法：锁是当前对象。</li><li>静态同步方法：锁是当前类。</li><li>同步方法快：锁是括号中的对象。</li></ul><h2 id="synchronized-和-volatile-的区别是什么？"><a href="#synchronized-和-volatile-的区别是什么？" class="headerlink" title="synchronized 和 volatile 的区别是什么？"></a>synchronized 和 volatile 的区别是什么？</h2><ul><li><p>volatile本质是告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；synchronize这是锁定当前变量，只有当前线程可以访问改变量。</p></li><li><p>volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。</p></li><li><p>volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性。</p></li><li><p>volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。</p></li><li><p>volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。</p></li></ul><h2 id="synchronized-和-Lock-有什么区别？"><a href="#synchronized-和-Lock-有什么区别？" class="headerlink" title="synchronized 和 Lock 有什么区别？"></a>synchronized 和 Lock 有什么区别？</h2><p>首先synchronized是java内置关键字，在jvm层面，Lock是个java类；</p><p>synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；</p><p>synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；</p><p>用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；</p><p>synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）；</p><p>Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。</p><h2 id="synchronized-和-ReentrantLock-区别是什么？"><a href="#synchronized-和-ReentrantLock-区别是什么？" class="headerlink" title="synchronized 和 ReentrantLock 区别是什么？"></a>synchronized 和 ReentrantLock 区别是什么？</h2><p>synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上： </p><p>ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁 </p><p>ReentrantLock可以获取各种锁的信息</p><p>ReentrantLock可以灵活地实现多路通知 </p><p>另外，二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word。</p><h2 id="说一下-atomic-的原理？"><a href="#说一下-atomic-的原理？" class="headerlink" title="说一下 atomic 的原理？"></a>说一下 atomic 的原理？</h2><p>JDK Atomic开头的类，是通过 CAS 原理解决并发情况下原子性问题。</p><p>CAS 包含 3 个参数，CAS(V, E, N)。V 表示需要更新的变量，E 表示变量当前期望值，N 表示更新为的值。只有当变量 V 的值等于 E 时，变量 V 的值才会被更新为 N。如果变量 V 的值不等于 E ，说明变量 V 的值已经被更新过，当前线程什么也不做，返回更新失败。</p><p>当多个线程同时使用 CAS 更新一个变量时，只有一个线程可以更新成功，其他都失败。失败的线程不会被挂起，可以继续重试 CAS，也可以放弃操作。</p><p>CAS 操作的原子性是通过 CPU 单条指令完成而保障的。JDK 中是通过 Unsafe 类中的 API 完成的。</p><p>在并发量很高的情况，会有大量 CAS 更新失败，所以需要慎用。</p><p>参考博文：<a href="https://blog.csdn.net/fangchao2011/article/details/89203535">最新Java面试题，常见面试题及答案汇总</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java基础&quot;&gt;&lt;/a&gt;Java基础&lt;/h1&gt;&lt;h2 id=&quot;“-”和equals有什么区别？&quot;&gt;&lt;a href=&quot;#“-”和equals有什么区别？&quot; cla</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.iahc.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>资源整理</title>
    <link href="https://blog.iahc.top/resource-collection/"/>
    <id>https://blog.iahc.top/resource-collection/</id>
    <published>2020-11-17T16:23:36.000Z</published>
    <updated>2021-10-19T06:33:28.848Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cdn.jsdelivr.net/gh/iahccc/PicBed/Java3y/">java3y教程</a><br><a href="https://github.com/apache/rocketmq/blob/master/docs/cn/">Apache RocketMQ开发者指南</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cdn.jsdelivr.net/gh/iahccc/PicBed/Java3y/&quot;&gt;java3y教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/apache/rocketmq/blob/master/docs/</summary>
      
    
    
    
    
    <category term="resource" scheme="https://blog.iahc.top/tags/resource/"/>
    
  </entry>
  
  <entry>
    <title>Redis笔记</title>
    <link href="https://blog.iahc.top/redis-note/"/>
    <id>https://blog.iahc.top/redis-note/</id>
    <published>2020-11-15T09:14:11.000Z</published>
    <updated>2021-10-19T06:33:28.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis编译安装"><a href="#Redis编译安装" class="headerlink" title="Redis编译安装"></a>Redis编译安装</h1><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><pre><code>wget *redis安装包url*  tar -zxvf *redis安装包路径*  cd *redis解压包路径*  sudo mkdir /usr/local/redis  sudo make  sudo make PREFIX=/usr/local/redis install  sudo mkdir /usr/local/redis/etc  sudo cp redis.conf /usr/local/redis/etc/  </code></pre><h2 id="设置redis以守护进程方式运行"><a href="#设置redis以守护进程方式运行" class="headerlink" title="设置redis以守护进程方式运行"></a>设置redis以守护进程方式运行</h2><p>将/usr/local/redis/etc/redis.conf文件中的daemonize改为yes</p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><pre><code># 如果提示权限不足,则先运行 su 命令进入管理员模式，再输入该语句。sudo echo &#39;export PATH=&quot;$PATH:/usr/local/redis/bin&quot;&#39; &gt;&gt; /etc/profile   source /etc/profile</code></pre><h2 id="Redis高可用方案"><a href="#Redis高可用方案" class="headerlink" title="Redis高可用方案"></a>Redis高可用方案</h2><p>Redis高可用常见的几种方式：</p><ul><li>Redis复制(Replication)和哨兵(Sentinel)机制</li><li>Redis集群(Redis-cluster模式)</li></ul><h3 id="Redis复制-Replication-和哨兵-Sentinel-机制"><a href="#Redis复制-Replication-和哨兵-Sentinel-机制" class="headerlink" title="Redis复制(Replication)和哨兵(Sentinel)机制"></a>Redis复制(Replication)和哨兵(Sentinel)机制</h3><h4 id="Replication工作原理"><a href="#Replication工作原理" class="headerlink" title="Replication工作原理"></a>Replication工作原理</h4><p><em>todo</em></p><h4 id="Sentinel工作原理"><a href="#Sentinel工作原理" class="headerlink" title="Sentinel工作原理"></a>Sentinel工作原理</h4><p><em>todo</em></p><h4 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h4><p>将redis.conf文件复制为redis-master-7000.conf、redis-slave-7001.conf、redis-slave-7002.conf并修改(文件名以端口号结尾)</p><pre><code># 服务器端口号，主从分别修改为7000/7001/7002port &lt;端口号&gt;# 使得Redis可以跨网络访问 bind 0.0.0.0 # 配置reids的密码 requirepass &quot;111111&quot; # 下面两个配置只需要配置从节点(slave) # 配置主服务器地址、端口号 replicaof 127.0.0.1 7001 # 主服务器密码 masterauth &quot;111111&quot;</code></pre><p>分别启动三个Redis服务</p><pre><code>redis-server /usr/local/redis/etc/redis-master-7000.confredis-server /usr/local/redis/etc/redis-slave-7001.confredis-server /usr/local/redis/etc/redis-slave-7002.conf</code></pre><p>使用redis-cli工具连接redis服务查看主从节点是否搭建成功</p><pre><code>redis-cli -h &lt;主机名&gt; -p &lt;端口号&gt;</code></pre><p>验证密码后输入进行验证<br>    info replication</p><p>接下来配置哨兵Sentinel。</p><p>将sentinel.conf文件复制为sentinel-27000.conf、sentinel-27001.conf、sentinel-27002.conf(文件名以端口号结尾)并修改<strong>(注意文件权限问题，需要给用户写权限)</strong></p><pre><code># 三个配置文件分别配置不同的端口号port &lt;端口号&gt;# 设置为后台启动daemonize yes# 主节点的名称(可以自定义，与后面的配置保持一致即可)# 主机地址# 端口号# 数量(2代表只有两个或两个以上的哨兵认为主服务器不可用的时候，才会进行failover操作)sentinel monitor mymaster 127.0.0.1 6379 2# 多长时间没有响应认为主观下线(SDOWN)sentinel down-after-milliseconds mymaster 60000# 表示如果15秒后,mysater仍没活过来，则启动failover，从剩下从节点序曲新的主节点sentinel failover-timeout mymaster 15000# 指定了在执行故障转移时， 最多可以有多少个从服务器同时对新的主服务器进行同步， 这个数字越小， 完成故障转移所需的时间就越长sentinel parallel-syncs mymaster 1</code></pre><p>启动三个Sentinel</p><pre><code>redis-sentinel /usr/local/redis/etc/sentinel-27000.confredis-sentinel /usr/local/redis/etc/sentinel-27001.confredis-sentinel /usr/local/redis/etc/sentinel-27002.conf</code></pre><p>然后手动关闭主节点的redis服务，并查看两个slave信息是否有一个变成了master。</p><h4 id="配置以脚本方式启动"><a href="#配置以脚本方式启动" class="headerlink" title="配置以脚本方式启动"></a>配置以脚本方式启动</h4><p>在redis的bin目录下新建redis-replication-sentinel-startup.sh和redis-replication-sentinel-shutdown.sh<br>startup.sh内容如下:</p><pre><code>redis-server /usr/local/redis/etc/redis-master-7000.confredis-server /usr/local/redis/etc/redis-slave-7001.confredis-server /usr/local/redis/etc/redis-slave-7002.confredis-sentinel /usr/local/redis/etc/sentinel-27000.confredis-sentinel /usr/local/redis/etc/sentinel-27001.confredis-sentinel /usr/local/redis/etc/sentinel-27002.confecho started。。。。。。。</code></pre><p>shutdown.sh内容如下:</p><pre><code>redis-cli -p 7000 shutdownredis-cli -p 7001 shutdownredis-cli -p 7002 shutdownredis-cli -p 27000 shutdownredis-cli -p 27001 shutdownredis-cli -p 27002 shutdown</code></pre><p>为两个文件添加可执行权限:</p><pre><code>sudo chmod +x &lt;filename&gt;</code></pre><p>参考链接:<a href="https://www.jianshu.com/p/7d5fbf90bcd7">Redis高可用方案</a><br>未完待续。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis编译安装&quot;&gt;&lt;a href=&quot;#Redis编译安装&quot; class=&quot;headerlink&quot; title=&quot;Redis编译安装&quot;&gt;&lt;/a&gt;Redis编译安装&lt;/h1&gt;&lt;h2 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="redis" scheme="https://blog.iahc.top/categories/redis/"/>
    
    
    <category term="redis" scheme="https://blog.iahc.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记</title>
    <link href="https://blog.iahc.top/linux-note/"/>
    <id>https://blog.iahc.top/linux-note/</id>
    <published>2020-11-15T05:07:45.000Z</published>
    <updated>2021-10-19T06:33:28.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h2><h3 id="apt软件卸载"><a href="#apt软件卸载" class="headerlink" title="apt软件卸载"></a>apt软件卸载</h3><pre><code>apt-get purge / apt-get –purge remove </code></pre><p>删除已安装包（不保留配置文件)。<br>如软件包a，依赖软件包b，则执行该命令会删除a，而且不保留配置文件</p><pre><code>apt-get autoremove </code></pre><p>删除为了满足依赖而安装的，但现在不再需要的软件包（包括已安装包），保留配置文件。</p><pre><code>apt-get remove </code></pre><p>删除已安装的软件包（保留配置文件），不会删除依赖软件包，且保留配置文件。</p><pre><code>apt-get autoclean </code></pre><p>APT的底层包是dpkg, 而dpkg 安装Package时, 会将 *.deb 放在 /var/cache/apt/archives/中，apt-get autoclean 只会删除 /var/cache/apt/archives/ 已经过期的deb。</p><pre><code>apt-get clean </code></pre><p>使用 apt-get clean 会将 /var/cache/apt/archives/ 的 所有 deb 删掉，可以理解为 rm /var/cache/apt/archives/*.deb。</p><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><h3 id="vim配置"><a href="#vim配置" class="headerlink" title="vim配置"></a>vim配置</h3><pre><code>set number set ts=4set expandtabset autoindentset softtabstop=4 set shiftwidth=4</code></pre><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="多行编辑"><a href="#多行编辑" class="headerlink" title="多行编辑"></a>多行编辑</h4><ol><li>在命令行模式按Ctrl+V进入块模式</li><li>利用上下左右键选择需要编辑多少行、从哪开始</li><li>输入大写字母“I”进入插入模式</li><li>编辑行</li><li>再次按Esc键回到命令行模式即可完成多行编辑</li></ol><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p>全局替换a为b<br>    :%s/a/b/g</p><h2 id="常用操作命令"><a href="#常用操作命令" class="headerlink" title="常用操作命令"></a>常用操作命令</h2><p>杀死包含某关键字的所以进程<br>    ps -ef | grep param | grep -v grep | cut -c 9-15 | xargs kill -9<br>    或<br>    ps x | grep param | grep -v grep | awk ‘{print $1}’ | xargs kill -9</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;apt&quot;&gt;&lt;a href=&quot;#apt&quot; class=&quot;headerlink&quot; title=&quot;apt&quot;&gt;&lt;/a&gt;apt&lt;/h2&gt;&lt;h3 id=&quot;apt软件卸载&quot;&gt;&lt;a href=&quot;#apt软件卸载&quot; class=&quot;headerlink&quot; title=&quot;apt软件卸载</summary>
      
    
    
    
    <category term="linux" scheme="https://blog.iahc.top/categories/linux/"/>
    
    
    <category term="linux apt vim" scheme="https://blog.iahc.top/tags/linux-apt-vim/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://blog.iahc.top/markdown/"/>
    <id>https://blog.iahc.top/markdown/</id>
    <published>2020-09-02T02:41:51.000Z</published>
    <updated>2021-10-19T06:33:28.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，其编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档，编写的文档后缀为 .md, .markdown。</p><h2 id="Markdown块级元素"><a href="#Markdown块级元素" class="headerlink" title="Markdown块级元素"></a>Markdown块级元素</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><h4 id="Setext样式"><a href="#Setext样式" class="headerlink" title="Setext样式"></a>Setext样式</h4><p>在标题底下使用<code>=</code>和<code>-</code>分别表示一级标题和二级标题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">二级标题</span><br><span class="line">-------------</span><br></pre></td></tr></table></figure><h4 id="Atx样式"><a href="#Atx样式" class="headerlink" title="Atx样式"></a>Atx样式</h4><p>每行开头使用1-6个<code>#</code>号来表示1-6级标题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">依次类推...</span><br></pre></td></tr></table></figure><h3 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h3><p>使用<code>&gt;</code>字符作为块引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Helloaaaaaaaaaaaaaaaaa</span><br><span class="line">&gt; aaaaaa</span><br><span class="line">&gt; aaaaaaaaaaaa</span><br><span class="line">&gt; aaaaaaaaaaaa</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown语法&quot;&gt;&lt;a href=&quot;#Markdown语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown语法&quot;&gt;&lt;/a&gt;Markdown语法&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Markdown" scheme="https://blog.iahc.top/categories/Markdown/"/>
    
    
    <category term="Markdown" scheme="https://blog.iahc.top/tags/Markdown/"/>
    
  </entry>
  
</feed>
